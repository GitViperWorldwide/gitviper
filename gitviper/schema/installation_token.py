# generated by datamodel-codegen:
#   filename:  installation_token.json
#   timestamp: 2024-09-03T07:15:53+00:00

from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, Field
from typing import List, Optional

from gitviper.schema.repository import Repository


class ReadWriteAdmin(Enum):
    read = "read"
    write = "write"
    admin = "admin"


class Permissions(BaseModel):
    actions: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
    )
    administration: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
    )
    checks: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for checks on code.",
    )
    codespaces: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to create, edit, delete, and list Codespaces.",
    )
    contents: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
    )
    dependabot_secrets: Optional[ReadWriteAdmin] = Field(
        None,
        description="The leve of permission to grant the access token to manage Dependabot secrets.",
    )
    deployments: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for deployments and deployment statuses.",
    )
    environments: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for managing repository environments.",
    )
    issues: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
    )
    metadata: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
    )
    packages: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for packages published to GitHub Packages.",
    )
    pages: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
    )
    pull_requests: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
    )
    repository_custom_properties: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.",
    )
    repository_hooks: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage the post-receive hooks for a repository.",
    )
    repository_projects: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage repository projects, columns, and cards.",
    )
    secret_scanning_alerts: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to view and manage secret scanning alerts.",
    )
    secrets: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage repository secrets.",
    )
    security_events: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to view and manage security events like code scanning alerts.",
    )
    single_file: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage just a single file.",
    )
    statuses: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for commit statuses.",
    )
    vulnerability_alerts: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage Dependabot alerts.",
    )
    workflows: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to update GitHub Actions workflow files.",
    )
    members: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for organization teams and members.",
    )
    organization_administration: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage access to an organization.",
    )
    organization_custom_roles: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for custom repository roles management.",
    )
    organization_custom_org_roles: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for custom organization roles management.",
    )
    organization_custom_properties: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for custom property management.",
    )
    organization_copilot_seat_management: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in beta and is subject to change.",
    )
    organization_announcement_banners: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to view and manage announcement banners for an organization.",
    )
    organization_events: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to view events triggered by an activity in an organization.",
    )
    organization_hooks: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage the post-receive hooks for an organization.",
    )
    organization_personal_access_tokens: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.",
    )
    organization_personal_access_token_requests: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.",
    )
    organization_plan: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for viewing an organization's plan.",
    )
    organization_projects: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage organization projects and projects beta (where available).",
    )
    organization_packages: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token for organization packages published to GitHub Packages.",
    )
    organization_secrets: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage organization secrets.",
    )
    organization_self_hosted_runners: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
    )
    organization_user_blocking: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to view and manage users blocked by the organization.",
    )
    team_discussions: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage team discussions and related comments.",
    )
    email_addresses: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage the email addresses belonging to a user.",
    )
    followers: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage the followers belonging to a user.",
    )
    git_ssh_keys: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage git SSH keys.",
    )
    gpg_keys: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to view and manage GPG keys belonging to a user.",
    )
    interaction_limits: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to view and manage interaction limits on a repository.",
    )
    profile: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to manage the profile settings belonging to a user.",
    )
    starring: Optional[ReadWriteAdmin] = Field(
        None,
        description="The level of permission to grant the access token to list and manage repositories a user is starring.",
    )


class RepositorySelection(Enum):
    all = "all"
    selected = "selected"


class InstallationToken(BaseModel):
    token: str
    expires_at: str
    permissions: Optional[Permissions] = Field(None, description="The permissions granted to the user access token.")
    repository_selection: Optional[RepositorySelection] = None
    repositories: Optional[List[Repository]] = None
    single_file: Optional[str] = Field(None, examples=["README.md"])
    has_multiple_single_files: Optional[bool] = Field(None, examples=[True])
    single_file_paths: Optional[List[str]] = Field(None, examples=[["config.yml", ".github/issue_TEMPLATE.md"]])
