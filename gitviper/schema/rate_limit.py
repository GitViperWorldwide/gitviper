# generated by datamodel-codegen:
#   filename:  rate_limit.json
#   timestamp: 2024-09-02T13:49:18+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field


class Core(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class Graphql(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class Search(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class CodeSearch(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class SourceImport(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class IntegrationManifest(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class CodeScanningUpload(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class ActionsRunnerRegistration(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class Scim(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class DependencySnapshots(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class Resources(BaseModel):
    core: Core = Field(..., title="Rate Limit")
    graphql: Optional[Graphql] = Field(None, title="Rate Limit")
    search: Search = Field(..., title="Rate Limit")
    code_search: Optional[CodeSearch] = Field(None, title="Rate Limit")
    source_import: Optional[SourceImport] = Field(None, title="Rate Limit")
    integration_manifest: Optional[IntegrationManifest] = Field(None, title="Rate Limit")
    code_scanning_upload: Optional[CodeScanningUpload] = Field(None, title="Rate Limit")
    actions_runner_registration: Optional[ActionsRunnerRegistration] = Field(None, title="Rate Limit")
    scim: Optional[Scim] = Field(None, title="Rate Limit")
    dependency_snapshots: Optional[DependencySnapshots] = Field(None, title="Rate Limit")


class Rate(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class RateLimit(BaseModel):
    resources: Resources
    rate: Rate = Field(..., title="Rate Limit")
